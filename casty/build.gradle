plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 33
    buildToolsVersion '33.0.1'

    defaultConfig {
        minSdk 21
        targetSdk 33
		versionName '1.0.0'
    }
    
	compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    lint {
        abortOnError false
    }
    
     publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
	/** Kotlin **/
    implementation 'androidx.core:core-ktx:1.9.0'
	
    api 'androidx.appcompat:appcompat:1.5.1'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.mediarouter:mediarouter:1.3.1'
    api 'com.google.android.gms:play-services-cast-framework:21.2.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group 'com.github.l1068'
            artifactId 'casty'
            version android.defaultConfig.versionName
            afterEvaluate {
                from components.release
            }
            pom {
                name = 'casty'
                description = 'casty'
                url = 'https://github.com/l1068/casty'
                developers {
                    developer {
                        name = 'l1068'
                        url = 'https://github.com/l1068'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/l1068/casty.git'
                    url = 'https://github.com/l1068/casty'
                }
            }
        }
    }
    repositories {
        maven {
            name 'ossrh'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    def secretKeyRingFile = findProperty("signing.secretKeyRingFile")

    if (secretKeyRingFile != null && file(secretKeyRingFile).exists()) {
        sign publishing.publications
    } else if (signingKey != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
